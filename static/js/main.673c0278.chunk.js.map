{"version":3,"sources":["components/UserRow/index.js","components/Wrapper/index.js","components/Form/index.js","utils/API.js","utils/SortFunctions.js","App.js","serviceWorker.js","index.js"],"names":["UserRow","props","scope","src","image","alt","name","phone","email","Wrapper","className","children","Form","value","search","onChange","handleInputChange","type","placeholder","axios","get","ascSortFunction","a","b","sortType","last","App","state","users","event","console","log","target","setState","sortName","sortedUsers","sort","API","then","res","data","results","catch","err","this","onClick","filter","user","first","toLowerCase","includes","map","key","login","uuid","picture","thumbnail","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0UAgBeA,MAbf,SAAiBC,GACf,OACE,4BACE,wBAAIC,MAAM,OAAV,IAAiB,yBAAKC,IAAKF,EAAMG,MAAOC,IAAK,iBAE7C,4BAAI,iCAAJ,IAAuBJ,EAAMK,MAC7B,4BAAI,iCAAJ,IAAuBL,EAAMM,OAC7B,4BAAI,iCAAJ,IAAuBN,EAAMO,S,MCHpBC,MAJf,SAAiBR,GACf,OAAO,yBAAKS,UAAU,WAAWT,EAAMU,W,MCAxB,SAASC,EAAMX,GAQ3B,OACE,6BACI,0BAAMS,UAAU,QACjB,2BACEG,MAAOZ,EAAMa,OAEbR,KAAK,SACLS,SAAUd,EAAMe,kBACfC,KAAK,OACNC,YAAY,a,2BCfT,EACL,WACN,OAAOC,IAAMC,IAND,kDCAHC,EAAkB,SAASC,EAAEC,EAAGC,GACzC,OAAIF,EAAC,KAASG,KAAOF,EAAC,KAASE,MAAe,EACrCH,EAAC,KAASG,KAAOF,EAAC,KAASE,KAAc,EAC3C,GC2EIC,E,4MApEbC,MAAQ,CACNC,MAAO,GACPd,OAAQ,I,EAWVE,kBAAoB,SAAAa,GAClBC,QAAQC,IAAIF,GADe,MAGHA,EAAMG,OAAtB1B,EAHmB,EAGnBA,KAAMO,EAHa,EAGbA,MAGd,EAAKoB,SAAL,eACG3B,EAAOO,K,EAGbqB,SAAW,SAAAV,GACT,IAAIW,EAAc,EAAKR,MAAMC,MAC7BO,EAAYC,MAAK,SAACd,EAAEC,GAAH,OAASF,EAAgBC,EAAEC,MAC1C,EAAKU,SAAS,CACdL,MAAOO,IACN,kBAAKL,QAAQC,IAAI,EAAKJ,MAAMC,W,kEAvBX,IAAD,OACjBS,IACEC,MAAK,SAAAC,GAAG,OAAI,EAAKN,SAAS,CAAEL,MAAOW,EAAIC,KAAKC,UAAU,kBACvDX,QAAQC,IAAI,EAAKJ,aAEhBe,OAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAIY,Q,+BAuBpB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC/B,EAAD,CACCE,OAAS8B,KAAKjB,MAAMb,OACpBE,kBAAqB4B,KAAK5B,oBAG3B,2BAAON,UAAU,SACvB,+BACE,4BACE,wBAAIR,MAAM,QAEV,wBAAIA,MAAM,MAAM2C,QAAS,kBAAM,EAAKX,SAAS,UAA7C,QACA,wBAAIhC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAEI,+BAED0C,KAAKjB,MAAMC,MAAMkB,QAAO,SAAAC,GAAI,OAAIA,EAAKzC,KAAK0C,MAAMC,cAAcC,SAAS,EAAKvB,MAAMb,OAAOmC,kBAAgBE,KAAI,SAAAJ,GAAI,OAChH,kBAAC,EAAD,CACAK,IAAOL,EAAKM,MAAMC,KAClBhD,KAAQyC,EAAKzC,KAAK0C,MAAQ,IAAMD,EAAKzC,KAAKmB,KAC1ClB,MAASwC,EAAKxC,MACdC,MAASuC,EAAKvC,MACdJ,MAAS2C,EAAKQ,QAAQC,sB,GA5DdC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.673c0278.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction UserRow(props) {\n  return (\n    <tr>\n      <th scope=\"row\"> <img src={props.image} alt =\"profile pic\"></img>\n      </th>\n      <td><strong></strong> {props.name}</td>\n      <td><strong></strong> {props.phone}</td>\n      <td><strong></strong> {props.email}</td>\n    </tr>\n   \n  );\n}\n\nexport default UserRow;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\n// class Form extends Component {\n  export default function Form (props) {\n\n  \n  // constructor(props){\n  //   super(props);\n  //   this.state = {search: \"\"}\n  // };\n      //  render() {\n     return (\n       <div>\n           <form className=\"form\">\n          <input\n            value={props.search}\n            // {this.state.firstName || this.state.lastName}\n            name=\"search\"\n            onChange={props.handleInputChange}\n             type=\"text\"\n            placeholder=\"Search\"\n          />\n             </form>\n    </div>\n    );\n  }\n  // }\n\n\n// export default Form;\n","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};","\r\n\r\nexport const ascSortFunction = function(a,b, sortType) {\r\n    if (a[\"name\"].last < b[\"name\"].last) {return -1;}\r\n    else if (a[\"name\"].last > b[\"name\"].last) {return 1;}\r\n    return 0;\r\n  }\r\n//   export const descSortFunction = function(a,b) {\r\n//     if (a.lastName < b.lastName) {return 1;}\r\n//     else if (a.lastName > b.lastName) {return -1;}\r\n//     return 0;\r\n//   }","import React, { Component } from \"react\";\nimport UserRow from \"./components/UserRow\";\nimport Wrapper from \"./components/Wrapper\";\n// import Title from \"./components/Title\";\nimport Form from \"./components/Form\";\n\nimport './App.css';\nimport API from \"./utils/API.js\";\nimport {ascSortFunction} from \"./utils/SortFunctions\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    users: [],\n    search: \"\"\n  };\n\n  componentDidMount() {\n     API.search()\n      .then(res => this.setState({ users: res.data.results },()=>\n      console.log(this.state)\n      ))\n      .catch(err => console.log(err));\n  \n  };\n  handleInputChange = event => {\n    console.log(event)\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n sortName = sortType => {\n   let sortedUsers = this.state.users\n   sortedUsers.sort((a,b) => ascSortFunction(a,b,sortType))\n     this.setState({\n     users: sortedUsers\n   }, ()=> console.log(this.state.users))\n }\n   \n \n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Form \n         search ={this.state.search}\n         handleInputChange = {this.handleInputChange} \n        />\n        {/* <Title>NavBar</Title> */}\n        <table className=\"table\">\n  <thead>\n    <tr>\n      <th scope=\"col\"></th>\n\n      <th scope=\"col\" onClick={() => this.sortName(\"name\")}>Name</th>\n      <th scope=\"col\">Phone</th>\n      <th scope=\"col\">Email</th>\n    </tr>\n  </thead><tbody>\n\n        {this.state.users.filter(user => user.name.first.toLowerCase().includes(this.state.search.toLowerCase())).map(user => (\n          <UserRow\n          key = {user.login.uuid}\n          name = {user.name.first + \" \" + user.name.last}\n          phone = {user.phone}\n          email = {user.email}\n          image = {user.picture.thumbnail}\n          />\n        ))}\n        </tbody>\n        </table>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}